# Boost version 1_80_0
function(link_boost target MOD)
    set(BK_BOOST_VERSION "1.80.0")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_atomic.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_chrono.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_container.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_context.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_contract.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_coroutine.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_date_time.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_fiber.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_filesystem.so.${BK_BOOST_VERSION}")
#    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_graph.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_iostreams.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_json.so.${BK_BOOST_VERSION}")
#    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_locale.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_log.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_log_setup.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_math_c99.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_math_c99f.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_math_c99l.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_math_tr1.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_math_tr1f.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_math_tr1l.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_nowide.so.${BK_BOOST_VERSION}")
#    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_numpy310.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_prg_exec_monitor.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_program_options.so.${BK_BOOST_VERSION}")
#    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_python310.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_random.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_regex.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_serialization.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_stacktrace_addr2line.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_stacktrace_basic.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_stacktrace_noop.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_system.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_thread.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_timer.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_type_erasure.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_unit_test_framework.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_wave.so.${BK_BOOST_VERSION}")
    target_link_libraries(${target} ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/lib/libboost_wserialization.so.${BK_BOOST_VERSION}")
    target_include_directories(${target} SYSTEM ${MOD} "${PROJECT_SOURCE_DIR}/thirdparty/boost/include")
    unset(BK_BOOST_VERSION)
endfunction()
